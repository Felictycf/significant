其实以上问题涉及到的东西是值传递与引用传递。在C++中二者都有，但是在Java中只有值传递。具体到实践中分两种情况：
- 传递的是基本数据类型：
其实传递的是值的拷贝。在方法中对值进行操作，并不影响传进去的那个值。如上面的change()方法，传值进去时只是按照data的样子重新创建了一个i，本质上data和i除了值相同以外，是两个独立的个体。

传递的是数组对象或者其他对象：
实际上传递的是对象的引用，但是并不是把引用传过去，而是把引用复制过去。就像上面的change1()方法一样，其本质是将传参b1这个引用的值复制给引用b。b1和b除了值相同外，是两个独立的个体。但是由于二者值相同，所以指向了堆内存中的同一个对象，二者都可以用来操作对象。
总结一下：
传值，传的都是栈中所储存的东西的拷贝。如果传进去的东西是基本数据类型，那么就直接复制一份，对其操作不影响原来的数据。
如果传进去的是一个引用，那么其实也是复制一份，所以指向同一对象。当操作这个引用时，改变了这个引用所指向的对象，看起来会让人觉得当时传进去的是对象本身，不然怎么在方法中对其修改会改变原本的对象呢？其实这是个假象。时刻记住，传进函数的都是栈内存中的东西，堆内存的东西是不会被传进去的。而函数内部能不能改变原来对象的值，就要看你是不是保持了原来传进去的引用所指向的对象没变。
————————————————
版权声明：本文为CSDN博主「hbdxzyb」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/z3896823/article/details/72954267